import{a as e,aq as t,H as s,ar as i,as as r}from"../../../three.module-6Gc0evA5.min.js";import{CopyShader as h}from"../shaders/CopyShader.min.js";import{ShaderPass as a}from"./ShaderPass.min.js";import{MaskPass as n,ClearMaskPass as d}from"./MaskPass.min.js";import"./Pass.min.js";class o{constructor(n,d){if(this.renderer=n,this._pixelRatio=n.getPixelRatio(),void 0===d){const i=n.getSize(new e);this._width=i.width,this._height=i.height,(d=new t(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:s})).texture.name="EffectComposer.rt1"}else this._width=d.width,this._height=d.height;this.renderTarget1=d,this.renderTarget2=d.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],this.copyPass=new a(h),this.copyPass.material.blending=i,this.clock=new r}swapBuffers(){const e=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=e}addPass(e){this.passes.push(e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}insertPass(e,t){this.passes.splice(t,0,e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}removePass(e){const t=this.passes.indexOf(e);-1!==t&&this.passes.splice(t,1)}isLastEnabledPass(e){for(let t=e+1;t<this.passes.length;t++)if(this.passes[t].enabled)return!1;return!0}render(e){void 0===e&&(e=this.clock.getDelta());const t=this.renderer.getRenderTarget();let s=!1;for(let t=0,i=this.passes.length;t<i;t++){const i=this.passes[t];if(!1!==i.enabled){if(i.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(t),i.render(this.renderer,this.writeBuffer,this.readBuffer,e,s),i.needsSwap){if(s){const t=this.renderer.getContext(),s=this.renderer.state.buffers.stencil;s.setFunc(t.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e),s.setFunc(t.EQUAL,1,4294967295)}this.swapBuffers()}void 0!==n&&(i instanceof n?s=!0:i instanceof d&&(s=!1))}}this.renderer.setRenderTarget(t)}reset(t){if(void 0===t){const s=this.renderer.getSize(new e);this._pixelRatio=this.renderer.getPixelRatio(),this._width=s.width,this._height=s.height,(t=this.renderTarget1.clone()).setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=t,this.renderTarget2=t.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2}setSize(e,t){this._width=e,this._height=t;const s=this._width*this._pixelRatio,i=this._height*this._pixelRatio;this.renderTarget1.setSize(s,i),this.renderTarget2.setSize(s,i);for(let e=0;e<this.passes.length;e++)this.passes[e].setSize(s,i)}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.copyPass.dispose()}}export{o as EffectComposer};
